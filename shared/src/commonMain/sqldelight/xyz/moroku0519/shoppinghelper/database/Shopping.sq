-- Shops table
CREATE TABLE IF NOT EXISTS Shop (
    id TEXT PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    address TEXT,
    latitude REAL,
    longitude REAL,
    category TEXT NOT NULL,
    phoneNumber TEXT,
    notes TEXT,
    isFavorite INTEGER NOT NULL DEFAULT 0,
    createdAt INTEGER NOT NULL,
    updatedAt INTEGER NOT NULL
);

-- Shopping lists table
CREATE TABLE IF NOT EXISTS ShoppingList (
    id TEXT PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    isActive INTEGER NOT NULL DEFAULT 1,
    createdAt INTEGER NOT NULL,
    updatedAt INTEGER NOT NULL
);

-- Shopping items table
CREATE TABLE IF NOT EXISTS ShoppingItem (
    id TEXT PRIMARY KEY NOT NULL,
    listId TEXT NOT NULL,
    name TEXT NOT NULL,
    quantity INTEGER DEFAULT 1,
    unit TEXT,
    price REAL,
    priority TEXT NOT NULL DEFAULT 'NORMAL',
    category TEXT NOT NULL DEFAULT 'OTHER',
    shopId TEXT,
    isCompleted INTEGER NOT NULL DEFAULT 0,
    notes TEXT,
    createdAt INTEGER NOT NULL,
    updatedAt INTEGER NOT NULL,
    completedAt INTEGER,
    FOREIGN KEY (listId) REFERENCES ShoppingList(id) ON DELETE CASCADE,
    FOREIGN KEY (shopId) REFERENCES Shop(id) ON DELETE SET NULL
);

-- Item templates table
CREATE TABLE IF NOT EXISTS ItemTemplate (
    id TEXT PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    quantity INTEGER DEFAULT 1,
    unit TEXT,
    category TEXT NOT NULL DEFAULT 'OTHER',
    shopId TEXT,
    notes TEXT,
    useCount INTEGER NOT NULL DEFAULT 0,
    lastUsedAt INTEGER,
    createdAt INTEGER NOT NULL,
    FOREIGN KEY (shopId) REFERENCES Shop(id) ON DELETE SET NULL
);

-- Indexes
CREATE INDEX IF NOT EXISTS idx_shopping_item_list_id ON ShoppingItem(listId);
CREATE INDEX IF NOT EXISTS idx_shopping_item_shop_id ON ShoppingItem(shopId);
CREATE INDEX IF NOT EXISTS idx_shopping_item_completed ON ShoppingItem(isCompleted);
CREATE INDEX IF NOT EXISTS idx_shopping_list_active ON ShoppingList(isActive);

-- Shop queries
selectAllShops:
SELECT * FROM Shop
ORDER BY name ASC;

selectShopById:
SELECT * FROM Shop
WHERE id = ?;

selectFavoriteShops:
SELECT * FROM Shop
WHERE isFavorite = 1
ORDER BY name ASC;

insertShop:
INSERT OR REPLACE INTO Shop(
    id, name, address, latitude, longitude, category, 
    phoneNumber, notes, isFavorite, createdAt, updatedAt
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateShop:
UPDATE Shop SET
    name = ?,
    address = ?,
    latitude = ?,
    longitude = ?,
    category = ?,
    phoneNumber = ?,
    notes = ?,
    isFavorite = ?,
    updatedAt = ?
WHERE id = ?;

deleteShop:
DELETE FROM Shop WHERE id = ?;

-- Shopping list queries
selectAllLists:
SELECT * FROM ShoppingList
ORDER BY isActive DESC, updatedAt DESC;

selectActiveList:
SELECT * FROM ShoppingList
WHERE isActive = 1
ORDER BY updatedAt DESC
LIMIT 1;

selectListById:
SELECT * FROM ShoppingList
WHERE id = ?;

insertList:
INSERT OR REPLACE INTO ShoppingList(id, name, isActive, createdAt, updatedAt)
VALUES (?, ?, ?, ?, ?);

updateList:
UPDATE ShoppingList SET
    name = ?,
    isActive = ?,
    updatedAt = ?
WHERE id = ?;

deleteList:
DELETE FROM ShoppingList WHERE id = ?;

-- Shopping item queries
selectItemsByListId:
SELECT 
    si.*,
    s.name AS shopName
FROM ShoppingItem si
LEFT JOIN Shop s ON si.shopId = s.id
WHERE si.listId = ?
ORDER BY si.isCompleted ASC, si.priority DESC, si.createdAt ASC;

selectIncompleteItemsByShop:
SELECT 
    si.*,
    sl.name AS listName
FROM ShoppingItem si
JOIN ShoppingList sl ON si.listId = sl.id
WHERE si.shopId = ? 
    AND si.isCompleted = 0 
    AND sl.isActive = 1
ORDER BY si.priority DESC, si.createdAt ASC;

selectItemById:
SELECT * FROM ShoppingItem
WHERE id = ?;

insertItem:
INSERT OR REPLACE INTO ShoppingItem(
    id, listId, name, quantity, unit, price, priority, category,
    shopId, isCompleted, notes, createdAt, updatedAt, completedAt
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateItem:
UPDATE ShoppingItem SET
    name = ?,
    quantity = ?,
    unit = ?,
    price = ?,
    priority = ?,
    category = ?,
    shopId = ?,
    isCompleted = ?,
    notes = ?,
    updatedAt = ?,
    completedAt = ?
WHERE id = ?;

toggleItemComplete:
UPDATE ShoppingItem SET
    isCompleted = CASE WHEN isCompleted = 0 THEN 1 ELSE 0 END,
    completedAt = CASE WHEN isCompleted = 0 THEN :completedAt ELSE NULL END,
    updatedAt = :updatedAt
WHERE id = :id;

deleteItem:
DELETE FROM ShoppingItem WHERE id = ?;

deleteCompletedItemsByList:
DELETE FROM ShoppingItem 
WHERE listId = ? AND isCompleted = 1;

-- Template queries
selectAllTemplates:
SELECT 
    t.*,
    s.name AS shopName
FROM ItemTemplate t
LEFT JOIN Shop s ON t.shopId = s.id
ORDER BY t.useCount DESC, t.lastUsedAt DESC;

selectTemplatesByCategory:
SELECT * FROM ItemTemplate
WHERE category = ?
ORDER BY useCount DESC;

insertTemplate:
INSERT OR REPLACE INTO ItemTemplate(
    id, name, quantity, unit, category, shopId, notes, useCount, lastUsedAt, createdAt
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateTemplateUsage:
UPDATE ItemTemplate SET
    useCount = useCount + 1,
    lastUsedAt = ?
WHERE id = ?;

deleteTemplate:
DELETE FROM ItemTemplate WHERE id = ?;